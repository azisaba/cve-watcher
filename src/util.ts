export const requestNVD = async (url: string): Promise<Response> => {
  let finalUrl = url
  if (finalUrl.includes('?')) {
    if (process.env.NVD_API_KEY) {
      finalUrl += '&apiKey=' + process.env.NVD_API_KEY
    }
  } else {
    if (process.env.NVD_API_KEY) {
      finalUrl += '?apiKey=' + process.env.NVD_API_KEY
    }
  }
  const res = await fetch(finalUrl)
  if (res.status === 200) {
    return res
  } else {
    throw new Error(`${res.status} ${res.statusText}`)
  }
}

export const convertDateTime = (time: number): string => {
  const date = new Date(time)
  const str = date.toISOString()
  // '2022-04-21T14:30:24.204Z' -> '2022-04-21T14:30:24:204 UTC'
  return str.substring(0, str.length - 1).replace('.', ':') + ' UTC'
}

export const cveToDiscordEmbed = (cve: CVEEntry, isNew: boolean): any => {
  const title = (isNew ? ':sparkles: New CVE: ' : ':pencil: Modified CVE: ') + cve.cve.CVE_data_meta.ID
  const source = `*Source: \`${cve.cve.CVE_data_meta.ASSIGNER}\`*`
  let description = '*No description available*'
  if (cve.cve.description && cve.cve.description.description_data.length > 0) {
    const value = cve.cve.description.description_data.find((e) => e.lang === 'en')?.value
    if (value) {
      description = value
    }
  }
  let color = 0xffffff
  const fields = []
  if (cve.impact.baseMetricV3) {
    const data = cve.impact.baseMetricV3.cvssV3
    color = severityToColor(data.baseSeverity)
    fields.push({
      name: 'Severity (CVSS v3)',
      value: `**Base Score**: ${data.baseScore.toFixed(1)} ${data.baseSeverity}\n**Vector**: ${data.vectorString}`,
    })
  }
  if (cve.impact.baseMetricV2) {
    const data = cve.impact.baseMetricV2
    if (color === 0xffffff) {
      color = severityToColor(data.severity)
    }
    fields.push({
      name: 'Severity (CVSS v2)',
      value: `**Base Score**: ${data.cvssV2.baseScore.toFixed(1)} ${data.severity}\n**Vector**: ${data.cvssV2.vectorString}`,
    })
  }
  const publishedTime = Math.round(new Date(cve.publishedDate).getTime() / 1000)
  const lastModifiedTime = Math.round(new Date(cve.lastModifiedDate).getTime() / 1000)
  fields.push({
    name: 'Published',
    value: `<t:${publishedTime}> (<t:${publishedTime}:R>)`,
  })
  fields.push({
    name: 'Last Modified',
    value: `<t:${lastModifiedTime}> (<t:${lastModifiedTime}:R>)`,
  })
  return {
    type: 'rich',
    title,
    description: `${source}\n${description}`,
    color,
    url: `https://nvd.nist.gov/vuln/detail/${cve.cve.CVE_data_meta.ID}`,
    fields,
  }
}

export const severityToColor = (severity: string): number => {
  switch (severity) {
    case 'LOW':
      return 0xffff00
    case 'MEDIUM':
      return 0xffa000
    case 'HIGH':
      return 0xff0000
    case 'CRITICAL':
      return 0x000000
    default:
      return 0xffffff
  }
}
